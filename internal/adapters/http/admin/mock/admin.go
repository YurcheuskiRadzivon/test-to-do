// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/http/admin/admin.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapters/http/admin/admin.go -destination=internal/adapters/http/admin/mock/admin.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/YurcheuskiRadzivon/test-to-do/internal/core/entity"
	fiber "github.com/gofiber/fiber/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthManager is a mock of AuthManager interface.
type MockAuthManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuthManagerMockRecorder
	isgomock struct{}
}

// MockAuthManagerMockRecorder is the mock recorder for MockAuthManager.
type MockAuthManagerMockRecorder struct {
	mock *MockAuthManager
}

// NewMockAuthManager creates a new mock instance.
func NewMockAuthManager(ctrl *gomock.Controller) *MockAuthManager {
	mock := &MockAuthManager{ctrl: ctrl}
	mock.recorder = &MockAuthManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthManager) EXPECT() *MockAuthManagerMockRecorder {
	return m.recorder
}

// GetUserID mocks base method.
func (m *MockAuthManager) GetUserID(ctx *fiber.Ctx) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockAuthManagerMockRecorder) GetUserID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockAuthManager)(nil).GetUserID), ctx)
}

// MockEncryptManager is a mock of EncryptManager interface.
type MockEncryptManager struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptManagerMockRecorder
	isgomock struct{}
}

// MockEncryptManagerMockRecorder is the mock recorder for MockEncryptManager.
type MockEncryptManagerMockRecorder struct {
	mock *MockEncryptManager
}

// NewMockEncryptManager creates a new mock instance.
func NewMockEncryptManager(ctrl *gomock.Controller) *MockEncryptManager {
	mock := &MockEncryptManager{ctrl: ctrl}
	mock.recorder = &MockEncryptManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptManager) EXPECT() *MockEncryptManagerMockRecorder {
	return m.recorder
}

// EncodePassword mocks base method.
func (m *MockEncryptManager) EncodePassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodePassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodePassword indicates an expected call of EncodePassword.
func (mr *MockEncryptManagerMockRecorder) EncodePassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodePassword", reflect.TypeOf((*MockEncryptManager)(nil).EncodePassword), password)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(ctx context.Context, user entity.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), ctx, user)
}

// GetUsers mocks base method.
func (m *MockUserService) GetUsers(ctx context.Context) ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserServiceMockRecorder) GetUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserService)(nil).GetUsers), ctx)
}

// MockAdminController is a mock of AdminController interface.
type MockAdminController struct {
	ctrl     *gomock.Controller
	recorder *MockAdminControllerMockRecorder
	isgomock struct{}
}

// MockAdminControllerMockRecorder is the mock recorder for MockAdminController.
type MockAdminControllerMockRecorder struct {
	mock *MockAdminController
}

// NewMockAdminController creates a new mock instance.
func NewMockAdminController(ctrl *gomock.Controller) *MockAdminController {
	mock := &MockAdminController{ctrl: ctrl}
	mock.recorder = &MockAdminControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminController) EXPECT() *MockAdminControllerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAdminController) CreateUser(ctx *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAdminControllerMockRecorder) CreateUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAdminController)(nil).CreateUser), ctx)
}

// GetUsers mocks base method.
func (m *MockAdminController) GetUsers(ctx *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockAdminControllerMockRecorder) GetUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAdminController)(nil).GetUsers), ctx)
}
