// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notes.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNote = `-- name: CreateNote :exec
INSERT INTO notes (title, description, status)
VALUES ($1, $2, $3)
`

type CreateNoteParams struct {
	Title       string      `json:"title"`
	Description string      `json:"description"`
	Status      pgtype.Text `json:"status"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) error {
	_, err := q.db.Exec(ctx, createNote, arg.Title, arg.Description, arg.Status)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes WHERE note_id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, noteID int) error {
	_, err := q.db.Exec(ctx, deleteNote, noteID)
	return err
}

const getNote = `-- name: GetNote :one
SELECT note_id, title, description, status FROM notes WHERE note_id = $1
`

func (q *Queries) GetNote(ctx context.Context, noteID int) (Note, error) {
	row := q.db.QueryRow(ctx, getNote, noteID)
	var i Note
	err := row.Scan(
		&i.NoteID,
		&i.Title,
		&i.Description,
		&i.Status,
	)
	return i, err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes
SET title = $2, description = $3, status = $4
WHERE note_id = $1
`

type UpdateNoteParams struct {
	NoteID      int         `json:"note_id"`
	Title       string      `json:"title"`
	Description string      `json:"description"`
	Status      pgtype.Text `json:"status"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.Exec(ctx, updateNote,
		arg.NoteID,
		arg.Title,
		arg.Description,
		arg.Status,
	)
	return err
}
