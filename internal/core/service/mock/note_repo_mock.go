// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/repositories/note.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/YurcheuskiRadzivon/test-to-do/internal/core/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockNoteRepository is a mock of NoteRepository interface.
type MockNoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepositoryMockRecorder
}

// MockNoteRepositoryMockRecorder is the mock recorder for MockNoteRepository.
type MockNoteRepositoryMockRecorder struct {
	mock *MockNoteRepository
}

// NewMockNoteRepository creates a new mock instance.
func NewMockNoteRepository(ctrl *gomock.Controller) *MockNoteRepository {
	mock := &MockNoteRepository{ctrl: ctrl}
	mock.recorder = &MockNoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteRepository) EXPECT() *MockNoteRepositoryMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockNoteRepository) CreateNote(ctx context.Context, note entity.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", ctx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockNoteRepositoryMockRecorder) CreateNote(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockNoteRepository)(nil).CreateNote), ctx, note)
}

// DeleteNote mocks base method.
func (m *MockNoteRepository) DeleteNote(ctx context.Context, noteID, authorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", ctx, noteID, authorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockNoteRepositoryMockRecorder) DeleteNote(ctx, noteID, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockNoteRepository)(nil).DeleteNote), ctx, noteID, authorID)
}

// GetNote mocks base method.
func (m *MockNoteRepository) GetNote(ctx context.Context, noteID, authorID int) (entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", ctx, noteID, authorID)
	ret0, _ := ret[0].(entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockNoteRepositoryMockRecorder) GetNote(ctx, noteID, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockNoteRepository)(nil).GetNote), ctx, noteID, authorID)
}

// GetNotes mocks base method.
func (m *MockNoteRepository) GetNotes(ctx context.Context, authorID int) ([]entity.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotes", ctx, authorID)
	ret0, _ := ret[0].([]entity.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotes indicates an expected call of GetNotes.
func (mr *MockNoteRepositoryMockRecorder) GetNotes(ctx, authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotes", reflect.TypeOf((*MockNoteRepository)(nil).GetNotes), ctx, authorID)
}

// UpdateNote mocks base method.
func (m *MockNoteRepository) UpdateNote(ctx context.Context, note entity.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", ctx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockNoteRepositoryMockRecorder) UpdateNote(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockNoteRepository)(nil).UpdateNote), ctx, note)
}
